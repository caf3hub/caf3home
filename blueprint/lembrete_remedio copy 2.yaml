blueprint:
  name: Lembrete Rem√©dio
  description: Cria lembretes de rem√©dio em determinados hor√°rios.
  domain: automation
  input:
    notification_target:
      name: Servi√ßo de Notifica√ß√£o
      description: Servi√ßo de notifica√ß√£o que ir√° enviar a mensagem.
      default: "notify.mqtt_notify"
      selector:
        text:
    remedio_lista:
      name: Lista de Rem√©dios
      description: Insira os rem√©dios no formato --- Nome, Hor√°rio, Descri√ß√£o
      selector:
        text:
          multiline: true

variables:
  remedio_lista: !input remedio_lista

triggers:
  - trigger: time_pattern
    minutes: /1

condition:
  - condition: template
    value_template: >
      {% set horario_atual = now().strftime('%H:%M') %}
      {% set remedios = remedio_lista.split('\n') %}
      {% for remedio in remedios %}
        {% set remedio_dados = remedio.split(', ') %}
        {% if remedio_dados[1].strip() == horario_atual %}
          {{ true }}
        {% endif %}
      {% endfor %}
      {{ false }}  # Retorna falso se nenhum rem√©dio corresponder ao hor√°rio

action:
  - alias: Preparar texto da notifica√ß√£o
    data:
      text: >-
        Lista de Rem√©dios para Agora:
        
        {%- set horario_atual = now().strftime('%H:%M') -%}
        {%- set remedios = remedio_lista.split('\n') -%}
        {%- for remedio in remedios -%}
          {%- set remedio_dados = remedio.split(', ') -%}
          {%- if remedio_dados[1].strip() == horario_atual -%}
            - **Rem√©dio**: {{ remedio_dados[0].strip() }} üíä  
              **Hor√°rio**: {{ remedio_dados[1].strip() }} ‚è∞  
              **Instru√ß√£o**: {{ remedio_dados[2].strip() }}  
          {%- endif -%}
        {%- endfor -%}

        horario remedio atual : {{ now().strftime('%H:%M') }}

      agent_id: conversation.google_generative_ai
    response_variable: agent
    action: conversation.process

  - alias: Enviar notifica√ß√£o
    service: !input notification_target
    data:
      title: "{{ now().strftime('%A') }} Lembrete de Rem√©dios"
      message: "{{ agent.response.speech.plain.speech }}"