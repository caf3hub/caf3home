blueprint:
  name: Verificação de Scripts e Automação via MQTT
  description: Executa scripts via MQTT, aguarda status e notifica sobre o sucesso ou falha.
  domain: automation
  input:
    notify_service:
      name: Serviço de Notificação
      description: Serviço de notificação que será usado para avisos de sucesso ou falha.
      default: notify.mqtt_notify
      selector:
        action: {}
    script_names:
      name: Nomes dos Scripts
      description: Lista de nomes dos scripts a serem executados e verificados via MQTT. Separe cada nome de script por nova linha.
      default: ""
      selector:
        text:
          multiline: true
    delay_between:
      name: Delay entre Scripts
      description: Tempo de espera (em segundos) entre a execução de cada script.
      default: 10
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: seconds
          mode: slider
    status_topic:
      name: Tópico de Status
      description: Tópico MQTT para receber o status dos scripts.
      default: home/script/status
      selector:
        text: {}
    script_topic:
      name: Tópico de Scripts
      description: Tópico MQTT para publicar os nomes dos scripts.
      default: home/script
      selector:
        text: {}

trigger:
  - platform: homeassistant
    event: start

action:
  - variables:
      script_list: >
        {{ script_names.split('\n') | select('!=', '') | list }}
  - repeat:
      count: "{{ script_list | length }}"
      sequence:
        - service: mqtt.publish
          data:
            topic: !input script_topic
            payload: "{{ script_list[repeat.index - 1] }}"
        - wait_for_trigger:
            - platform: mqtt
              topic: !input status_topic
              payload: "{{ script_list[repeat.index - 1] }}: Sucesso"
            - platform: mqtt
              topic: !input status_topic
              payload: "{{ script_list[repeat.index - 1] }}: Falhou"
        - choose:
            - conditions:
                - condition: template
                  value_template: "{{ trigger.payload == script_list[repeat.index - 1] ~ ': Sucesso' }}"
              sequence:
                - service: !input notify_service
                  data:
                    message: "{{ script_list[repeat.index - 1] }} realizado com sucesso."
            - conditions:
                - condition: template
                  value_template: "{{ trigger.payload == script_list[repeat.index - 1] ~ ': Falhou' }}"
              sequence:
                - service: !input notify_service
                  data:
                    message: "Falha ao executar {{ script_list[repeat.index - 1] }}."
        - delay:
            seconds: !input delay_between
