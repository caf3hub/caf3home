blueprint:
  name: Telegram - Notificação de Agenda e Tarefas
  description: "Notifica no Telegram sobre a previsão do tempo, eventos do calendário e tarefas do dia."
  domain: automation
  input:
    trigger_time:
      name: Hora do Disparo
      description: "A hora do dia em que a automação deve disparar."
      default: "05:00:00"
      selector:
        time:
    weather_entity:
      name: Entidade de Previsão do Tempo
      description: Entidade do sensor de previsão do tempo.
      selector:
        entity:
          domain: weather
    calendar_entity:
      name: Entidade de Calendário
      description: Entidade do calendário a ser consultado.
      selector:
        entity:
          domain: calendar
    zone_entity:
      name: Entidade de Zona
      description: Entidade da zona (por exemplo, casa).
      selector:
        entity:
          domain: zone
    calendar_duration:
      name: Duração do Calendário
      description: Duração em horas para verificar os eventos do calendário.
      default: 18
      selector:
        number:
          min: 1
          max: 24
          unit_of_measurement: hours
    notification_target:
      name: Serviço de Notificação
      description: Serviço de notificação que irá enviar a mensagem.
      default: "notify.mqtt_notify"
      selector:
        text:
    telegram_chat_id: 
      name: ID do Chat do Telegram
      description: O ID numérico do chat do Telegram para onde a mensagem será enviada. Pode ser de um usuário ou grupo.
      default: "29832395"
      selector:
        text:
    todo_entities:
      name: Entidades de Tarefas
      description: Entidades de listas de tarefas a serem verificadas.
      selector:
        entity:
          multiple: true
          domain: todo

trigger:
  - platform: time
    at: !input trigger_time

variables:
  calendar_duration: !input calendar_duration
  weather_entity: !input weather_entity
  calendar_entity: !input calendar_entity
  zone_entity: !input zone_entity
  todo_entities: !input todo_entities
  prompt: >-
    Por favor, gere um texto para uma notificação que será enviada aos
    usuários do smartphone com informações úteis.

    Você é um agente pessoal útil que gera texto para o usuário:

    - Suas respostas são úteis, amigáveis, calorosas e perspicazes.
    - Suas respostas não são técnicas e não incluem detalhes internos do Home Assistant, como entidades nas respostas.
    - Suas mensagens dos eventos do calendário são em tópicos para facilitar a leitura e compreensão.
    - Sua mensagem será enviada para o telegram, então não tente usar negrito nem italico com *.
    - Pode usar emoji para ilustrar.
    - Suas mensagens ajudam o usuário a se preparar para o dia, por exemplo:
      - Anotar condições climáticas incomuns para o local e a época do ano (mas não detalhes mundanos como "0% de chance de precipitação")
      - Quanto tempo resta até a primeira reunião
      - Todos os eventos do dia
      - Todas as tarefas do dia
      - Qualquer coisa que possa ser especial ou única, como comemorar um aniversário.

action:
  - alias: Buscar previsão do tempo
    data:
      type: hourly
    target:
      entity_id:
        - "{{ weather_entity }}"
    response_variable: daily_forecast
    action: weather.get_forecasts

  - variables:
      forecast_entity: "{{ daily_forecast[weather_entity] }}"
      forecast: "{{ forecast_entity.forecast[0] }}"

  - alias: Agenda do calendário busca
    data:
      duration:
        hours: "{{ calendar_duration }}"
    target:
      entity_id:
        - "{{ calendar_entity }}"
    response_variable: events_response
    action: calendar.get_events

  - alias: Obter Tarefas
    data:
      status: needs_action
    target:
      entity_id: "{{ todo_entities | list }}"
    response_variable: mylist
    action: todo.get_items


  - alias: Texto de notificação do agente de conversa
    data:
      text: >-
        Time: {{ now().strftime("%A %B %d %H:%M %p") }}

        {%- if weather_entity is defined %}

        {%- set temperature_unit = state_attr(weather_entity, 'temperature_unit') -%}

        Forecast: {{ forecast.condition }} ({{ forecast.temperature }}{{
        temperature_unit }}, {{ forecast.precipitation }}% precipitation)

        {%- endif %}

        Calendar "{{ state_attr(calendar_entity, 'friendly_name') }}" events for
        the next {{ calendar_duration }} hours:

        {%- set agenda = (events_response | items | first)[1] %}

        {%- if agenda.events %}
          {%- for event in agenda.events %}
          - Summary: {{ event.summary }}
            Start-End: {% if event.start is defined %}{{ event.start }} to {{ event.end }}{% else %}All Day{% endif %}
            {%- if event.description is defined %}
            Description: {{ event.description }}
            {% endif -%}
            {%- if event.location is defined %}
              Location: {{ event.location }}
            {% endif -%}
          {%- endfor %}
        {%- else %}
          - No upcoming events.
        {%- endif %}

        Tarefas
          {% set listas = todo_entities %}
          {% for lista in listas %}
            {{ lista.split('.')[1] }}:
            {%- set items = mylist[lista]['items'] if mylist is defined else [] -%}
            {%- if items -%}
              {% for item in items %}
                {{ item.summary }}
              {% endfor %}
            {%- else -%}
              Nenhuma tarefa pendente.
            {%- endif -%}
          {% if not loop.last %}
          {%- endif %}
          {% endfor %}

        {{ prompt }}
      agent_id: conversation.google_generative_ai
    response_variable: agent
    action: conversation.process

  - alias: Enviar notificação
    data:
      title: "{{ now().strftime('%A') }} Agenda"
      message: "{{ agent.response.speech.plain.speech | replace('\n', ' ') }}"
      data:
        chat_id: "{{ telegram_chat_id }}"
    action: !input notification_target
