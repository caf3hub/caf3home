---
blueprint:
  name: Conversation agent Calendar and Task Notification
  description:
    Conversation agent generates a notification based on the upcoming calendar
    agenda, location, and weather information.
  domain: automation
  input:
    notify_time:
      name: Notification time
      description: Time the automation is triggered to send the notification.
      selector:
        time: {}
      default: 07:00:00
    notify_service:
      name: Notify service name
      description:
        The name of the notify service where the notification should be sent.
      selector:
        text: {}
      default: notify.notify
    notify_target:
      name: Notify target
      description: The target of the notify service.
      selector:
        text: {}
      default:
    calendar_entities:
      name: Calendars
      description: The calendar entities to use for finding upcoming calendar events.
      selector:
        entity:
          multiple: true  # Permite selecionar múltiplos calendários
          filter:
            - domain:
                - calendar
    calendar_duration:
      name: Calendar and Task Duration
      description: How many hours ahead to look for upcoming calendar events and tasks.
      selector:
        duration:
      default:
        hours: 18
    weather_entity:
      name: Weather Entity
      description: The weather entity to use for upcoming weather forecast.
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - weather
    zone_entity:
      name: Home Zone Entity
      description:
        The zone entity to use to determine approximate location for understanding
        typical weather.
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - zone
    task_list_entities:
      name: Task List Entities
      description: The entities that hold the task list information.
      selector:
        entity:
          multiple: true  # Permite selecionar múltiplas listas de tarefas
          filter:
            - domain: sensor
              integration: your_integration  # Substitua pela integração correta
    conversation_agent:
      name: Conversation Agent
      selector:
        conversation_agent:
    prompt:
      name: Conversation Agent Prompt
      selector:
        text:
          multiline: true
          type: text
      default: |-
        Please generate text for a notification that will be sent to the users
        smartphone with helpful information.

        You are a helpful personal agent that generates text for the user:
        - Your answers are helpful, friendly, warm, insightful.
        - Your answers are not technical, and do not include Home Assistant internal details such as entities in responses.
        - Your messages help the user prepare for their day, for example:
          - Making note of unusual weather for the location and time of year (but not mundane details like "0% chance of precipitation")
          - How much time remaining until their first meeting
          - Anything that may be special or unique, such as celebrating a birthday

trigger:
  platform: time
  at: !input notify_time

action:
  - variables:
      weather_entity: !input weather_entity
      calendar_entities: !input calendar_entities
      zone_entity: !input zone_entity
      calendar_duration: !input calendar_duration
      task_list_entities: !input task_list_entities
      prompt: !input prompt
  - alias: Fetch Weather Forecast
    service: weather.get_forecasts
    data:
      type: hourly
    target:
      entity_id:
        - "{{ weather_entity }}"
    response_variable: daily_forecast
  - variables:
      forecast_entity: "{{ daily_forecast[weather_entity] }}"
      forecast: "{{ forecast_entity.forecast[0] }}"
  - alias: Fetch Calendar Agenda
    service: calendar.get_events
    data:
      duration: !input calendar_duration
    target:
      entity_id: !input calendar_entities
    response_variable: events_responses
  - alias: Fetch Task Lists
    variables:
      start_time: "{{ now() }}"
      end_time: "{{ now() + calendar_duration }}"
      tasks: >
        {% set all_tasks = [] %}
        {% for entity_id in task_list_entities %}
          {% set entity_tasks = state_attr(entity_id, 'tasks') %}
          {% if entity_tasks %}
            {% for task in entity_tasks %}
              {% if task.due_date >= start_time and task.due_date <= end_time %}
                {% set all_tasks = all_tasks + [task] %}
              {% endif %}
            {% endfor %}
          {% endif %}
        {% endfor %}
        {{ all_tasks }}
  - alias: "Conversation Agent Notification Text"
    service: conversation.process
    data:
      text: |-
        Time: {{ now().strftime("%A %B %d %H:%M %p") }}
        {%- if weather_entity is defined %}
        {%- set temperature_unit = state_attr(weather_entity, 'temperature_unit') -%}
        Forecast: {{ forecast.condition }} ({{ forecast.temperature }}{{ temperature_unit }}, {{ forecast.precipitation }}% precipitation)
        {%- endif %}

        Calendars:
        {%- for calendar in calendar_entities %}
        {{ state_attr(calendar, 'friendly_name') }} events for the next {{ calendar_duration.hours }}:
        {%- set agenda = (events_responses | selectattr('entity_id', 'equalto', calendar) | list | first)[1] %}
        {%- if agenda.events %}
          {%- for event in agenda.events %}
          - Summary: {{ event.summary }}
            Start-End: {% if event.start is defined %}{{ event.start }} to {{ event.end }}{% else %}All Day{% endif %}
            {%- if event.description is defined %}
            Description: {{ event.description }}
            {% endif -%}
            {%- if event.location is defined %}
              Location: {{ event.location }}
            {% endif -%}
          {%- endfor %}
        {%- else %}
          - No upcoming events.
        {%- endif %}
        {%- endfor %}

        Tasks:
        {%- if tasks %}
          {%- for task in tasks %}
          - {{ task.summary }} (Due: {{ task.due_date.strftime('%H:%M') }})
          {%- endfor %}
        {%- else %}
          - No tasks for the selected period.
        {%- endif %}

        {{ prompt }}
      agent_id: !input conversation_agent
    response_variable: agent
  - alias: "Send notification"
    service: !input notify_service
    data:
      target: !input notify_target
      title: "{{ now().strftime('%A') }} Agenda"
      message: "{{ agent.response.speech.plain.speech }}"
