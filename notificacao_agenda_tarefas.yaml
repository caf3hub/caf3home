---
blueprint:
  name: Conversation agent Agenda Notification
  description:
    Conversation agent generates a notification based on the upcoming calendar
    agenda, location, and weather information.
  domain: automation
  input:
    notify_time:
      name: Notification time
      description: Time the automation is triggered to send the notification.
      selector:
        time: {}
      default: 07:00:00
    notify_service:
      name: Notify service name
      description:
        The name of the notify service where the notification should be
        sent.
      selector:
        text: {}
      default: notify.notify
    notify_target:
      name: Notify target
      description: The target of the notify service.
      selector:
        text: {}
      default:
    calendar_entity:
      name: Calendar
      description: The calendar entity to use for finding upcoming calendar events.
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - calendar
    calendar_duration:
      name: Calendar Event duration
      description: How many hours ahead to look for upcoming calendar events.
      selector:
        duration:
      default:
        hours: 18
    task_list_entities:
      name: Entidades de Lista de Tarefas
      description: As entidades que contêm as informações das listas de tarefas.
      selector:
        entity:
          multiple: true  # Permite selecionar múltiplas listas de tarefas
          filter:
            - domain:
                - todo
    weather_entity:
      name: Weather Entity
      description: The weather entity to use for upcoming weather forecast.
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - weather
    zone_entity:
      name: Home Zone Entity
      description:
        The zone entity to use to determine approximate location for understanding
        typical weather.
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - zone
    conversation_agent:
      name: Conversation Agent
      selector:
        conversation_agent:
    prompt:
      name: Conversation Agent Prompt
      selector:
        text:
          multiline: true
          type: text
      default: |-
        Por favor, gere um texto para uma notificação que será enviada aos usuários
        smartphone com informações úteis.
        
        Você é um agente pessoal útil que gera texto para o usuário:
        - Suas respostas são úteis, amigáveis, calorosas e perspicazes.
        - Suas respostas não são técnicas e não incluem detalhes internos do Home Assistant, como entidades nas respostas.
        - Suas mensagens dos eventos do calendário são em tópicos para facilitar a leitura e compreensão.
        - Suas mensagens ajudam o usuário a se preparar para o dia, por exemplo:
          - Anotar condições climáticas incomuns para o local e a época do ano (mas não detalhes mundanos como "0% de chance de precipitação")
          - Quanto tempo resta até a primeira reunião
          - Todos os eventos do dia
          - Todas as tarefas do dia
          - Qualquer coisa que possa ser especial ou única, como comemorar um aniversário

trigger:
  platform: time
  at: !input notify_time

action:
  - variables:
      weather_entity: !input weather_entity
      calendar_entity: !input calendar_entity
      zone_entity: !input zone_entity
      calendar_duration: !input calendar_duration
      prompt: !input prompt
  - alias: Fetch Weather Forecast
    service: weather.get_forecasts
    data:
      type: hourly
    target:
      entity_id:
        - "{{ weather_entity }}"
    response_variable: daily_forecast
  - variables:
      forecast_entity: "{{ daily_forecast[weather_entity] }}"
      forecast: "{{ forecast_entity.forecast[0] }}"
  - alias: Fetch Calendar Agenda
    service: calendar.get_events
    data:
      duration: !input calendar_duration
    target:
      entity_id: !input calendar_entity
    response_variable: events_response
  - alias: Obter Tarefas
    data:
      status: needs_action
    target:
      entity_id: !input task_list_entities
    response_variable: mylist
    action: todo.get_items
    enabled: true
  - alias: "Conversation Agent Notification Text"
    service: conversation.process
    data:
      text: |-
        Time: {{ now().strftime("%A %B %d %H:%M %p") }}
        {%- if weather_entity is defined %}
        {%- set temperature_unit = state_attr(weather_entity, 'temperature_unit') -%}
        Forecast: {{ forecast.condition }} ({{ forecast.temperature }}{{ temperature_unit }}, {{ forecast.precipitation }}% precipitation)
        {%- endif %}

        Calendar "{{ state_attr(calendar_entity, 'friendly_name') }}" events for the next {{ calendar_duration.hours }}:
        {%- set agenda = (events_response | items | first)[1] %}
        {%- if agenda.events %}
          {%- for event in agenda.events %}
          - Summary: {{ event.summary }}
            Start-End: {% if event.start is defined %}{{ event.start }} to {{ event.end }}{% else %}All Day{% endif %}
            {%- if event.description is defined %}
            Description: {{ event.description }}
            {% endif -%}
            {%- if event.location is defined %}
              Location: {{ event.location }}
            {% endif -%}
          {%- endfor %}
        {%- else %}
          - No upcoming events.
        {%- endif %}

        Tasks:
        {%- set listas = task_list_entities -%}
        {%- for lista in listas %}
        {{ lista }}:
        {%- set items = mylist[lista]['items'] -%}
          {%- if items %}
            • {% for item in items %}{{ item.summary }}{% if not loop.last %}
            • {% endif %}{% endfor %}
          {%- else %}
            Nenhuma tarefa pendente.
          {%- endif %}
        {% if not loop.last %}{% endif %}
        {% endfor -%}

        {{ prompt }}
      agent_id: !input conversation_agent
    response_variable: agent
  - alias: "Send notification"
    service: !input notify_service
    data:
      target: !input notify_target
      title: "{{ now().strftime('%A') }} Agenda"
      message: "{{ agent.response.speech.plain.speech }}"
