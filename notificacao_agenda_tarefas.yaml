blueprint:
  name: Multi Calendar Conversation agent agenda notification
  source_url: https://github.com/fixtse/blueprints/blob/main/multiple_notify_agent_calendar_agenda.yaml
  description:  
    "# Multi Calendar Conversation Agent Agenda Notification\n **Version: 2.0**\n\n
    Conversation agent generates a notification based on the upcoming calendars, agendas, location, and weather.\n\n
    You can choose up to 3 calendars and 3 notify services to better fit your needs:\n\n
    - Don't forget to check the *Conversation agent prompt* and the end and update it if needed.\n\n
    - Adjust the maximum tokens to return in the OpenAI integration, if not sure what I'm talking about,\n Check up the **How to make it better** section of my video: [Click here](https://www.youtube.com/watch?v=rIFkGibePIw&t=283s) \n\n
    Need help? or Just want to say hi \U0001F642? \n 
    Let me know what you think about this blueprint in the comments: [Click Here](https://fixtse.com/blog/openia-conversation-integration)\n\n"
  author: fixtse
  domain: automation
  input:
    notify_time:
      name: Notification time
      description: Time the automation is triggered to send the notification.
      selector:
        time: {}
      default: 07:00:00
    calendar_number:
      name: How many calendars do you want to use?
      description: Select the number 
      default: one
      selector:
        select:
          options:
          - label: '1'
            value: one
          - label: '2'
            value: two
          - label: '3'
            value: three
          multiple: false
          custom_value: false    
    calendar_entity_1:
      name: First Calendar
      description: The first calendar entity to use for finding upcoming calendar events.
      default: []
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - calendar
    calendar_entity_2:
      name: Second Calendar
      description: The second calendar entity to use for finding upcoming calendar events.
      default: []
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - calendar
    calendar_entity_3:
      name: Third Calendar
      description: The third calendar entity to use for finding upcoming calendar events.
      default: []
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - calendar
    calendar_duration:
      name: Calendar event duration
      description: How many hours ahead to look for upcoming calendar events.
      selector:
        duration:
      default:
        hours: 18
    task_list_entities:
      name: Entidades de Lista de Tarefas
      description: As entidades que contêm as informações das listas de tarefas.
      selector:
        entity:
          multiple: true  # Permite selecionar múltiplas listas de tarefas
          filter:
            - domain:
                - todo
    weather_entity:
      name: Weather entity
      description: The weather entity to use for upcoming weather forecast.
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - weather
    zone_entity:
      name: Home zone entity
      description:
        The zone entity to use to determine approximate location for understanding
        typical weather.
      selector:
        entity:
          multiple: false
          filter:
            - domain:
                - zone
    notify_number:
      name: How many notify services do you want to use?
      description: Select the number 
      default: one
      selector:
        select:
          options:
          - label: '1'
            value: one
          - label: '2'
            value: two
          - label: '3'
            value: three
          multiple: false
          custom_value: false
    notify_service_1:
      name: First Notify service name
      description:
        The name of the first notify service where the notification should be
        sent.
      selector:
        text: {}
      default: notify.notify_1
    notify_service_2:
      name: Second Notify service name
      description:
        The name of the second notify service where the notification should be
        sent.
      selector:
        text: {}
      default: notify.notify_2
    notify_service_3:
      name: Third Notify service name
      description:
        The name of the third notify service where the notification should be
        sent.
      selector:
        text: {}
      default: notify.notify_3
    conversation_agent:
      name: Conversation agent
      description: |-
        The conversation agent to use for generating the notification text.
        This should be a OpenAI conversation agent for this Blueprint to work.
      selector:
        conversation_agent:
    prompt:
      name: Conversation agent prompt
      selector:
        text:
          multiline: true
          type: text
      default: |-
        Por favor, gere um texto para uma notificação que será enviada aos usuários
        smartphone com informações úteis.
        
        Você é um agente pessoal útil que gera texto para o usuário:
        - Suas respostas são úteis, amigáveis, calorosas e perspicazes.
        - Suas respostas não são técnicas e não incluem detalhes internos do Home Assistant, como entidades nas respostas.
        - Suas mensagens dos eventos do calendário são em tópicos para facilitar a leitura e compreensão.
        - Suas mensagens ajudam o usuário a se preparar para o dia, por exemplo:
          - Anotar condições climáticas incomuns para o local e a época do ano (mas não detalhes mundanos como "0% de chance de precipitação")
          - Quanto tempo resta até a primeira reunião
          - Todos os eventos do dia
          - Todas as tarefas do dia
          - Qualquer coisa que possa ser especial ou única, como comemorar um aniversário
    

trigger:
  platform: time
  at: !input notify_time

action:
  - variables:
      weather_entity: !input weather_entity
      calendar_number: !input calendar_number
      calendar_entity_1: !input calendar_entity_1
      calendar_entity_2: !input calendar_entity_2
      calendar_entity_3: !input calendar_entity_3
      notify_number: !input notify_number
      zone_entity: !input zone_entity
      calendar_duration: !input calendar_duration
      prompt: !input prompt
  - alias: Fetch First Calendar Agenda
    service: calendar.list_events
    data:
      duration: !input calendar_duration
    target:
      entity_id: !input calendar_entity_1
    response_variable: agenda_1
  - if:
      - condition: template
        value_template: '{{ (calendar_number == ''two'') or (calendar_number == ''three'') }}'
    then:
      - alias: Fetch Second Calendar Agenda
        service: calendar.list_events
        data:
          duration: !input calendar_duration
        target:
          entity_id: !input calendar_entity_2
        response_variable: agenda_2
  - if:
      - condition: template
        value_template: '{{ calendar_number == ''three''}}'
    then:
      - alias: Fetch Third Calendar Agenda
        service: calendar.list_events
        data:
          duration: !input calendar_duration
        target:
          entity_id: !input calendar_entity_3
        response_variable: agenda_3  
  - alias: Obter Tarefas
    data:
      status: needs_action
    target:
      entity_id: !input task_list_entities
    response_variable: mylist
    action: todo.get_items
    enabled: true
  - alias: "Conversation Agent Notification Text"
    service: conversation.process
    data:
      text: |-
        Time: {{ now() }}
        {%- if zone_entity is defined %}
        Latitude: {{ state_attr(zone_entity, 'latitude') | round(1) }}
        Longitude: {{ state_attr(zone_entity, 'longitude') | round(1) }}
        {% endif %}
        
        {%- if weather_entity is defined %}
        {%- set forecast = state_attr(weather_entity, 'forecast')[0] %}
        {%- set temperature_unit = state_attr(weather_entity, 'temperature_unit') -%}
        Weather: {{ forecast.condition }} ({{ forecast.temperature }}{{ temperature_unit }}, {{ forecast.precipitation }}% precipitation)
        {%- endif %}
        
        
        Calendar "{{ state_attr(calendar_entity_1, 'friendly_name') }}" events for the next {{ calendar_duration.hours }} hours:
        {%- if agenda_1.events %}
          {%- for event in agenda_1.events %}
          - Summary: {{ event.summary }}
            Start-End: {% if event.start is defined %}{{ event.start }} to {{ event.end }}{% else %}All Day{% endif %}
            {%- if event.description is defined %}
            Description: {{ event.description }}
            {% endif -%}
            {%- if event.location is defined %}
              Location: {{ event.location }}
            {% endif -%}
          {%- endfor %}
        {%- else %}
          - No upcoming events.
        {%- endif %}
       
        {%- if (calendar_number == "two") or (calendar_number == "three") %}
        Calendar "{{ state_attr(calendar_entity_2, 'friendly_name') }}" events for the next {{ calendar_duration.hours }} hours:
          {%- if agenda_2.events %}
            {%- for event in agenda_2.events %}
            - Summary: {{ event.summary }}
              Start-End: {% if event.start is defined %}{{ event.start }} to {{ event.end }}{% else %}All Day{% endif %}
              {%- if event.description is defined %}
              Description: {{ event.description }}
              {% endif -%}
              {%- if event.location is defined %}
                Location: {{ event.location }}
              {% endif -%}
            {%- endfor %}
          {%- else %}
            - No upcoming events.
          {%- endif %}
        {%- endif %}

        {%- if (calendar_number == "three") %}
        Calendar "{{ state_attr(calendar_entity_3, 'friendly_name') }}" events for the next {{ calendar_duration.hours }} hours:
          {%- if agenda_3.events %}
            {%- for event in agenda_3.events %}
            - Summary: {{ event.summary }}
              Start-End: {% if event.start is defined %}{{ event.start }} to {{ event.end }}{% else %}All Day{% endif %}
              {%- if event.description is defined %}
              Description: {{ event.description }}
              {% endif -%}
              {%- if event.location is defined %}
                Location: {{ event.location }}
              {% endif -%}
            {%- endfor %}
          {%- else %}
            - No upcoming events.
          {%- endif %}
        {%- endif %}

        Tasks:
        {%- set listas = task_list_entities -%}
        {%- for lista in listas %}
        {{ lista }}:
        {%- set items = mylist[lista]['items'] -%}
          {%- if items %}
            • {% for item in items %}{{ item.summary }}{% if not loop.last %}
            • {% endif %}{% endfor %}
          {%- else %}
            Nenhuma tarefa pendente.
          {%- endif %}
        {% if not loop.last %}{% endif %}
        {% endfor -%}

        {{ prompt }}
      agent_id: !input conversation_agent
    response_variable: agent
  - alias: "Send notification"
    service: !input notify_service_1
    data:
      title: "{{ now().strftime('%A') }} Agenda"
      message: "{{ agent.response.speech.plain.speech }}"
  - if:
      - condition: template
        value_template: '{{ (notify_number == ''two'') or (notify_number == ''three'') }}'
    then:
      - alias: "Send notification"
        service: !input notify_service_2
        data:
          title: "{{ now().strftime('%A') }} Agenda"
          message: "{{ agent.response.speech.plain.speech }}"
  - if:
      - condition: template
        value_template: '{{ notify_number == ''three''}}'
    then:
      - alias: "Send notification"
        service: !input notify_service_3
        data:
          title: "{{ now().strftime('%A') }} Agenda"
          message: "{{ agent.response.speech.plain.speech }}"
  
